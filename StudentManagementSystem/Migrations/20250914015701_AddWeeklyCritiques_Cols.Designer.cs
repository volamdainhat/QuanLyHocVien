// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementSystem.Infrastructure;

#nullable disable

namespace StudentManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250914015701_AddWeeklyCritiques_Cols")]
    partial class AddWeeklyCritiques_Cols
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Attendances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimetableId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Code")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "STUDENT",
                            IsActive = true,
                            Name = "Học viên",
                            SortOrder = 1,
                            Type = "Role"
                        },
                        new
                        {
                            Id = 2,
                            Code = "SQUAD_LEADER",
                            IsActive = true,
                            Name = "Tiểu đội trưởng",
                            SortOrder = 2,
                            Type = "Role"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CLASS_MONITOR",
                            IsActive = true,
                            Name = "Lớp trưởng",
                            SortOrder = 3,
                            Type = "Role"
                        },
                        new
                        {
                            Id = 4,
                            Code = "STUDY_ASSISTANT",
                            IsActive = true,
                            Name = "Lớp phó học tập",
                            SortOrder = 4,
                            Type = "Role"
                        },
                        new
                        {
                            Id = 5,
                            Code = "LOGISTICS_ASSISTANT",
                            IsActive = true,
                            Name = "Lớp phó hậu cần",
                            SortOrder = 5,
                            Type = "Role"
                        },
                        new
                        {
                            Id = 6,
                            Code = "TEST_15M",
                            IsActive = true,
                            Name = "Kiểm tra 15 phút",
                            SortOrder = 1,
                            Type = "ExamType"
                        },
                        new
                        {
                            Id = 7,
                            Code = "TEST_1H",
                            IsActive = true,
                            Name = "Kiểm tra 1 tiết",
                            SortOrder = 2,
                            Type = "ExamType"
                        },
                        new
                        {
                            Id = 8,
                            Code = "FINAL",
                            IsActive = true,
                            Name = "Thi cuối môn",
                            SortOrder = 3,
                            Type = "ExamType"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Grades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("ExamTypeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Grade")
                        .HasColumnType("REAL");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TraineeId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.ImageGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("ContentType")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbPath")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ImageGalleries");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Misconduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TraineeId");

                    b.ToTable("Misconducts");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Reports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<float>("AverageScore")
                        .HasColumnType("REAL");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MisconductCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalAbsences")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalStudents")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.SubjectAverageScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<decimal>("AverageScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolYear")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TraineeId", "SubjectId", "Semester", "SchoolYear")
                        .IsUnique();

                    b.ToTable("SubjectAverageScores");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Trainee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("AverageScore")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DayOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EnlistmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FatherFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FatherPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeritScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MotherFullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MotherPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ranking")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Trainees");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.WeeklyCritique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Sqlite:Autoincrement", true);

                    b.Property<string>("AcademicResult")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisciplineAwareness")
                        .HasColumnType("TEXT");

                    b.Property<string>("EthicsLifestyle")
                        .HasColumnType("TEXT");

                    b.Property<int>("FinalScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PoliticalAttitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResearchActivity")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudyMotivation")
                        .HasColumnType("TEXT");

                    b.Property<int>("TraineeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WeekDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TraineeId");

                    b.ToTable("WeeklyCritiques");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Grades", b =>
                {
                    b.HasOne("StudentManagementSystem.Domain.Entities.Trainee", "Trainee")
                        .WithMany("Grades")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Misconduct", b =>
                {
                    b.HasOne("StudentManagementSystem.Domain.Entities.Trainee", "Trainee")
                        .WithMany("Misconducts")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Reports", b =>
                {
                    b.HasOne("StudentManagementSystem.Domain.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("StudentManagementSystem.Domain.Entities.Class", "Class")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Domain.Entities.Subject", "Subject")
                        .WithMany("Schedules")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.SubjectAverageScore", b =>
                {
                    b.HasOne("StudentManagementSystem.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Domain.Entities.Trainee", "Trainee")
                        .WithMany()
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Trainee", b =>
                {
                    b.HasOne("StudentManagementSystem.Domain.Entities.Class", null)
                        .WithMany("Trainees")
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.WeeklyCritique", b =>
                {
                    b.HasOne("StudentManagementSystem.Domain.Entities.Trainee", "Trainee")
                        .WithMany("WeeklyCritiques")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Class", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("StudentManagementSystem.Domain.Entities.Trainee", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Misconducts");

                    b.Navigation("WeeklyCritiques");
                });
#pragma warning restore 612, 618
        }
    }
}
